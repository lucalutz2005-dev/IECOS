"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformTableSetExpression = exports.transformTableGetExpression = exports.isTableNewCall = exports.isTableSetCall = exports.isTableGetCall = exports.isTableExtensionIdentifier = void 0;
const ts = require("typescript");
const lua = require("../../../LuaAST");
const extensions = require("../../utils/language-extensions");
const typescript_1 = require("../../utils/typescript");
const utils_1 = require("../../../utils");
const tableGetExtensions = [extensions.ExtensionKind.TableGetType, extensions.ExtensionKind.TableGetMethodType];
const tableSetExtensions = [extensions.ExtensionKind.TableSetType, extensions.ExtensionKind.TableSetMethodType];
const tableExtensions = [extensions.ExtensionKind.TableNewType, ...tableGetExtensions, ...tableSetExtensions];
function getTableExtensionKindForCall(context, node, validExtensions) {
    const type = typescript_1.getFunctionTypeForCall(context, node);
    return type && validExtensions.find(extensionKind => extensions.isExtensionType(type, extensionKind));
}
function isTableExtensionIdentifier(context, node) {
    const type = context.checker.getTypeAtLocation(node);
    return tableExtensions.some(extensionKind => extensions.isExtensionType(type, extensionKind));
}
exports.isTableExtensionIdentifier = isTableExtensionIdentifier;
function isTableGetCall(context, node) {
    return getTableExtensionKindForCall(context, node, tableGetExtensions) !== undefined;
}
exports.isTableGetCall = isTableGetCall;
function isTableSetCall(context, node) {
    return getTableExtensionKindForCall(context, node, tableSetExtensions) !== undefined;
}
exports.isTableSetCall = isTableSetCall;
function isTableNewCall(context, node) {
    const type = context.checker.getTypeAtLocation(node.expression);
    return extensions.isExtensionType(type, extensions.ExtensionKind.TableNewType);
}
exports.isTableNewCall = isTableNewCall;
function transformTableGetExpression(context, node) {
    const extensionKind = getTableExtensionKindForCall(context, node, tableGetExtensions);
    utils_1.assert(extensionKind);
    const args = node.arguments.slice();
    if (args.length === 1 &&
        (ts.isPropertyAccessExpression(node.expression) || ts.isElementAccessExpression(node.expression))) {
        args.unshift(node.expression.expression);
    }
    return lua.createTableIndexExpression(context.transformExpression(args[0]), context.transformExpression(args[1]), node);
}
exports.transformTableGetExpression = transformTableGetExpression;
function transformTableSetExpression(context, node) {
    const extensionKind = getTableExtensionKindForCall(context, node, tableSetExtensions);
    utils_1.assert(extensionKind);
    const args = node.arguments.slice();
    if (args.length === 2 &&
        (ts.isPropertyAccessExpression(node.expression) || ts.isElementAccessExpression(node.expression))) {
        args.unshift(node.expression.expression);
    }
    return lua.createAssignmentStatement(lua.createTableIndexExpression(context.transformExpression(args[0]), context.transformExpression(args[1]), node), context.transformExpression(args[2]));
}
exports.transformTableSetExpression = transformTableSetExpression;
//# sourceMappingURL=table.js.map